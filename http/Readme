Implemented commands:

Register: "username" and "password" are read from the keyboard.
I made the payload to be able to send it in compute_post_request.
I read username, password, removed the last character by setting
the last position in the string with '\0'. I created the payload with the received information
(username and password) and I created the message with the help of the function "compute_post_
request", after which I sent it with the "send_to_server" function. I displayed the response because,
if there is an error, it will be displayed from the server. For the case specified in the statement
that the username is used, at the end of the server's response, you see "error: The username
"x" is taken!"}. I chose to display the entire response of the server because I found it helpfull as well
interesting to see in case of an error, the error code from HTTP1.1

Login: It is 90% identical to the register function, only in the case of login
of a user, I am also interested in the cookie obtained after logging in. Errors are treated again
in case of error, I don't have to get any cookies. I got the cookie by searching in the answer
server after the text "Set-Cookie", and then obtained from there.

Sign out:
The most important part besides the basic part of request server display response close
connection, it was the one where at the end I made the token and cookie to be empty again (to be NULL),
so that exactly as specified in the theme requirement, it does not happen that a new client has
rights that may have remained from a customer who logged in previously. And if a customer
wants to disconnect but has not yet connected, he will receive a message that he must log in first.

Enter_library:
For access to the library, I checked that the user is logged in, if not, it's an error.
If he is logged in, he can access the library, I sent a request to the server with the specified url,
from his answer I processed the string of characters to obtain the token (extract function
tokens).

get_books:
I checked that the user is logged in and entered the library, otherwise a message is displayed
of error. If it is not an error, then I sent a request to the server with the corresponding url,
and from his answer I took the part that starts with the books (with a str after "[") and displayed them.

get_book:
I read with scanf the id from the keyboard, I made a function that checks if
the id is a number, it has no other characters among it, if it is a number then I have formatted it
the url that has the specified path and the id of the book, I sent a request to the server with a token
that I needed, I received an answer and displayed the details of the requested book.

add_book:
If the user does not have access to the library, he receives an error and cannot add books. Otherwise,
I read from the keyboard the required data about the book that will be added, I checked that the number
of pages to be numbered, I built the payload with sprintf, and I sent the post request to the server, again
in the end, I displayed his answer to see that it is "200 OK", which means that the request was made
successfully.

Delete_book:
I used a helper function that, as I said, I created in
request.c, which does everything the get does, only that it has "DELETE" in the method_name,
I called it in the delete_book function, that's about all I did. Besides this,
I initially checked, of course, that the user has access to the library so that he can
perform the deletion operation.
